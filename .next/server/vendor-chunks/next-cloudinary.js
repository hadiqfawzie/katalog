"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ oe),\n/* harmony export */   CldOgImage: () => (/* binding */ re),\n/* harmony export */   CldUploadButton: () => (/* binding */ ae),\n/* harmony export */   CldUploadWidget: () => (/* binding */ G),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ se),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ B),\n/* harmony export */   getCldImageUrl: () => (/* binding */ v),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ k),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ $e)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-5DLOH2LF.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(ssr)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(ssr)/./node_modules/next/dist/api/script.js\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.mjs\");\n\n\n\n\n\nvar K = {\n    name: \"next-cloudinary\",\n    version: \"6.6.2\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && pnpm build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"vitest run\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" pnpm build && cd tests/nextjs-app && npm install && npm run build',\n        \"test:watch\": \"vitest\"\n    },\n    dependencies: {\n        \"@cloudinary-util/types\": \"1.0.5\",\n        \"@cloudinary-util/url-loader\": \"5.3.1\",\n        \"@cloudinary-util/util\": \"^3.0.0\",\n        \"@tsconfig/recommended\": \"^1.0.3\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/node\": \"^20.11.5\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        dotenv: \"^16.3.1\",\n        mkdirp: \"^3.0.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\",\n        vitest: \"^1.3.1\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar Q = \"A\", J = \"V\", Z = te(next_package_json__WEBPACK_IMPORTED_MODULE_2__.version), ee = te(K.version);\nfunction te(e) {\n    let t = e;\n    return t.includes(\"-\") && (t = t.split(\"-\")[0]), t;\n}\nasync function S(e) {\n    let { src: t } = e;\n    try {\n        await new Promise((d, i)=>{\n            fetch(t).then((o)=>{\n                if (!o.ok) {\n                    i(o);\n                    return;\n                }\n                d(o);\n            });\n        });\n    } catch (d) {\n        return d.status === 423 ? (await new Promise((i)=>setTimeout(()=>i(void 0), 200)), await S(e)) : !1;\n    }\n    return !0;\n}\nfunction x(e) {\n    let t = e?.cloud?.cloudName ?? \"dhg0v3zqs\";\n    if (!t) throw new Error(\"A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.\");\n    let d = e?.cloud?.apiKey ?? process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY, i = e?.url?.secureDistribution ?? process.env.NEXT_PUBLIC_CLOUDINARY_SECURE_DISTRIBUTION, o = e?.url?.privateCdn ?? process.env.NEXT_PUBLIC_CLOUDINARY_PRIVATE_CDN;\n    return Object.assign({\n        cloud: {\n            ...e?.cloud,\n            apiKey: d,\n            cloudName: t\n        },\n        url: {\n            ...e?.url,\n            secureDistribution: i,\n            privateCdn: o\n        }\n    }, e);\n}\nfunction V(e) {\n    return Object.assign({\n        product: Q,\n        sdkCode: J,\n        sdkSemver: ee,\n        techVersion: Z,\n        feature: \"\"\n    }, e);\n}\n\nfunction v(e, t, d) {\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: e,\n        config: x(t),\n        analytics: V(d)\n    });\n}\nfunction B({ loaderOptions: e, imageProps: t, cldOptions: d, cldConfig: i = {} }) {\n    let o = {\n        ...t,\n        ...d\n    };\n    if (o.width = typeof o.width == \"string\" ? parseInt(o.width) : o.width, o.height = typeof o.height == \"string\" ? parseInt(o.height) : o.height, typeof e?.width == \"number\" && typeof o.width == \"number\" && e.width !== o.width) {\n        let n = e.width / o.width;\n        o.width = e.width, typeof o.height == \"number\" && (o.height = Math.floor(o.height * n));\n    } else typeof e?.width == \"number\" && typeof o?.width != \"number\" && (o.width = e?.width);\n    return v(o, i);\n}\nvar Te = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(t, d) {\n    let i = !1, o = [\n        \"assetType\",\n        \"config\",\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: r })=>{\n        Object.keys(r).forEach((f)=>{\n            if (o.includes(f)) throw new Error(`Option ${f} already exists!`);\n            o.push(f);\n        });\n    });\n    let n = {\n        alt: t.alt,\n        src: t.src\n    };\n    Object.keys(t).filter((r)=>typeof r == \"string\" && !o.includes(r)).forEach((r)=>n[r] = t[r]);\n    let l = Object.keys(n).map((r)=>`${r}:${n[r]}`).join(\";\"), [C, I] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(l), a = {};\n    if (o.forEach((r)=>{\n        let c = t[r];\n        c && (a[r] = c || void 0);\n    }), t.preserveTransformations) try {\n        let r = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(t.src).map((c)=>c.join(\",\"));\n        a.rawTransformations = [\n            ...r.flat(),\n            ...t.rawTransformations || []\n        ];\n    } catch (r) {\n        console.warn(`Failed to preserve transformations: ${r.message}`);\n    }\n    let s = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]} || {};\n    (t.unoptimized === !0 || s?.unoptimized === !0) && (n.src = v({\n        ...a,\n        width: n.width,\n        height: n.height,\n        src: n.src,\n        format: \"default\",\n        quality: \"default\"\n    }, t.config));\n    async function E(r) {\n        let c = !0;\n        if (i) return;\n        if (i = !0, typeof t.onError == \"function\") {\n            let w = t.onError(r);\n            typeof w == \"boolean\" && w === !1 && (c = !1);\n        } else typeof t.onError == \"boolean\" && t.onError === !1 && (c = !1);\n        if (c === !1) return;\n        let f = r.target;\n        await S({\n            src: f.src\n        }) && I(`${l};${Date.now()}`);\n    }\n    let T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(E, [\n        S,\n        l\n    ]), m = next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    return \"default\" in m && (m = m.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n        key: C,\n        ...n,\n        loader: (r)=>B({\n                loaderOptions: r,\n                imageProps: n,\n                cldOptions: a,\n                cldConfig: t.config\n            }),\n        onError: T,\n        ref: d\n    });\n}), oe = Te;\n\n\nfunction k(e) {\n    return v({\n        ...e,\n        format: e.format || \"jpg\",\n        width: e.width || 1200,\n        height: e.height || 627,\n        crop: e.crop || {\n            type: \"fill\",\n            gravity: \"center\",\n            source: !0\n        }\n    });\n}\nvar Le = \"summary_large_image\", ve = ({ excludeTags: e = [], twitterTitle: t, keys: d = {}, ...i })=>{\n    let { alt: o } = i, { width: n = 1200, height: l = 627 } = i;\n    n = typeof n == \"string\" ? parseInt(n) : n, l = typeof l == \"string\" ? parseInt(l) : l;\n    let C = k({\n        ...i,\n        width: n,\n        height: l\n    }), I = k({\n        ...i,\n        width: n,\n        height: l,\n        format: i.format || \"webp\"\n    }), a = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...d\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"og:image\"],\n        property: \"og:image\",\n        content: C\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: C\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${n}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${l}`\n    }), o && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: o\n    }), !e.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: t || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: Le\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: a[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: I\n    }));\n}, re = ve;\n\n\n\nfunction ne(e) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(e) : setTimeout(()=>e(), 1);\n}\nvar Ne = [\n    \"success\"\n], Me = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    close: \"onClose\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, We = ({ children: e, config: t, onError: d, onOpen: i, onUpload: o, options: n, signatureEndpoint: l, uploadPreset: C, ...I })=>{\n    let a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), E = !!l, [T, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [r, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [f, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), w = x(t), { cloudName: _, apiKey: h } = w?.cloud, O = {\n        cloudName: _,\n        uploadPreset: C || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: h,\n        ...n\n    };\n    E && (O.uploadSignature = A, O.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof r > \"u\") return;\n        r.event === \"success\" && typeof o == \"function\" && (process.env.NODE_ENVIRONMENT === \"development\" && console.warn(\"The onUpload callback is deprecated. Please use onSuccess instead.\"), o(r, s.current));\n    }, [\n        r\n    ]);\n    function W() {\n        P(!1), a.current || (a.current = window.cloudinary), ne(()=>{\n            s.current || (s.current = z());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            s.current?.destroy(), s.current = void 0;\n        }, []);\n    function A(p, y) {\n        if (typeof l > \"u\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(l, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: y\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((L)=>L.json()).then(({ signature: L })=>{\n            p(L);\n        });\n    }\n    function u(p, y = []) {\n        if (s.current || (s.current = z()), typeof s?.current[p] == \"function\") return s.current[p](...y);\n    }\n    function M(p) {\n        u(\"close\", [\n            p\n        ]);\n    }\n    function N(p) {\n        return u(\"destroy\", [\n            p\n        ]);\n    }\n    function g() {\n        u(\"hide\");\n    }\n    function D() {\n        return u(\"isDestroyed\");\n    }\n    function pe() {\n        return u(\"isMinimized\");\n    }\n    function ce() {\n        return u(\"isShowing\");\n    }\n    function ue() {\n        u(\"minimize\");\n    }\n    function ge(p, y) {\n        u(\"open\", [\n            p,\n            y\n        ]), typeof i == \"function\" && i(s.current);\n    }\n    function me() {\n        u(\"show\");\n    }\n    function fe() {\n        u(\"update\");\n    }\n    let $ = {\n        close: M,\n        destroy: N,\n        hide: g,\n        isDestroyed: D,\n        isMinimized: pe,\n        isShowing: ce,\n        minimize: ue,\n        open: ge,\n        show: me,\n        update: fe\n    };\n    function z() {\n        return a.current?.createUploadWidget(O, (p, y)=>{\n            if (p && p !== null && (m(p), typeof d == \"function\" && d(p, {\n                widget: s.current,\n                ...$\n            })), typeof y?.event == \"string\") {\n                Ne.includes(y?.event) && c(y);\n                let L = Me[y.event];\n                if (typeof L == \"string\" && typeof I[L] == \"function\") {\n                    let ye = I[L];\n                    ye(y, {\n                        widget: s.current,\n                        ...$\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof e == \"function\" && e({\n        cloudinary: a.current,\n        widget: s.current,\n        results: r,\n        error: T,\n        isLoading: f,\n        ...$\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: W,\n        onError: (p)=>console.error(`Failed to load Cloudinary Upload Widget: ${p.message}`)\n    }));\n}, G = We;\nvar De = ({ className: e, children: t, onClick: d, onError: i, onOpen: o, onUpload: n, onAbort: l, onBatchCancelled: C, onClose: I, onDisplayChanged: a, onPublicId: s, onQueuesEnd: E, onQueuesStart: T, onRetry: m, onShowCompleted: r, onSourceChanged: c, onSuccess: f, onTags: P, onUploadAdded: w, options: _, signatureEndpoint: h, uploadPreset: O, ...W })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        onError: i,\n        onOpen: o,\n        onUpload: n,\n        onAbort: l,\n        onBatchCancelled: C,\n        onClose: I,\n        onDisplayChanged: a,\n        onPublicId: s,\n        onQueuesEnd: E,\n        onQueuesStart: T,\n        onRetry: m,\n        onShowCompleted: r,\n        onSourceChanged: c,\n        onSuccess: f,\n        onTags: P,\n        onUploadAdded: w,\n        options: _,\n        signatureEndpoint: h,\n        uploadPreset: O\n    }, ({ open: A, isLoading: u })=>{\n        function M(N) {\n            N.preventDefault(), A(), typeof d == \"function\" && d(N);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...W,\n            className: e || \"\",\n            onClick: M,\n            disabled: u\n        }, t || \"Upload\");\n    })), ae = De;\n\n\n\n\nvar j = [], le = \"1.11.1\", Re = (e)=>{\n    let { className: t, config: d, height: i, id: o, onDataLoad: n, onError: l, onMetadataLoad: C, onPause: I, onPlay: a, onEnded: s, width: E } = e, T = x(d), m = (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_7__.getVideoPlayerOptions)(e, T), { publicId: r } = m;\n    if (typeof r > \"u\") throw new Error(\"Video Player requires a Public ID or Cloudinary URL - please specify a src prop\");\n    let c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), P = e.videoRef || f, w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), _ = e.playerRef || w, h = o || `player-${r.replace(\"/\", \"-\")}`, O = \"cld-video-player cld-fluid\";\n    t && (O = `${O} ${t}`), j.filter((g)=>g === h).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work.\n    Try adding a unique id to each player.`) : j.push(h);\n    let A = {\n        error: l,\n        loadeddata: n,\n        loadedmetadata: C,\n        pause: I,\n        play: a,\n        ended: s\n    };\n    function u(g) {\n        let D = A[g.type];\n        typeof D == \"function\" && D(N());\n    }\n    function M() {\n        \"cloudinary\" in window && (c.current = window.cloudinary, _.current = c.current.videoPlayer(P.current, m), Object.keys(A).forEach((g)=>{\n            typeof A[g] == \"function\" && _.current?.on(g, u);\n        }));\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            _.current?.videojs.cloudinary.dispose(), j = j.filter((g)=>g !== h);\n        }, []);\n    function N() {\n        return {\n            player: _.current,\n            video: P.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${le}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${E} / ${i}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: P,\n        id: h,\n        className: O,\n        width: E,\n        height: i\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-videoplayer-${h}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${le}/dist/cld-video-player.min.js`,\n        onLoad: M,\n        onError: (g)=>console.error(`Failed to load Cloudinary Video Player: ${g.message}`)\n    })));\n}, se = Re;\n\nfunction $e(e, t, d) {\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            format: \"auto:video\",\n            ...e\n        },\n        config: x(t),\n        analytics: V(d)\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;